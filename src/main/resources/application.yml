spring:
  application:
    name: support-ticket-system
  # Common database configuration
  datasource:
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: false
  # Jackson configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
    time-zone: UTC

# Server configuration
server:
  port: 8080
  servlet:
    context-path: /api
  error:
    include-message: always
    include-binding-errors: always

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:default_dev_secret_key_should_be_changed_in_production_environment}
  expiration: ${JWT_EXPIRATION:86400000} # 24 hours in milliseconds
  issuer: support-ticket-system

# CORS Configuration
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:5173}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: Authorization,Content-Type,X-Requested-With,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers
  exposed-headers: Authorization
  allow-credentials: true
  max-age: 3600

# AWS Configuration
aws:
  # Region Configuration
  region: ${AWS_REGION:us-east-1}
  access-key: ${AWS_ACCESS_KEY:}
  secret-key: ${AWS_SECRET_KEY:}
  credentials:
    use-default: ${AWS_USE_DEFAULT_CREDENTIALS:true}

  # S3 Configuration
  s3:
    bucket-name: ${AWS_S3_BUCKET_NAME:support-ticket-system-files}
    endpoint: ${AWS_S3_ENDPOINT:}
    presigned-url-expiration: ${AWS_S3_PRESIGNED_URL_EXPIRATION:3600}
    # Additional S3 Configuration
    region: ${AWS_S3_REGION:${AWS_REGION:us-east-1}}
    public-bucket: ${AWS_S3_PUBLIC_BUCKET:false}
    folders:
      attachments: ${AWS_S3_FOLDER_ATTACHMENTS:attachments}
      profiles: ${AWS_S3_FOLDER_PROFILES:profiles}
      tickets: ${AWS_S3_FOLDER_TICKETS:tickets}
      temp: ${AWS_S3_FOLDER_TEMP:temp}
    max-file-size: ${AWS_S3_MAX_FILE_SIZE:10485760} # 10MB
    allowed-file-types: ${AWS_S3_ALLOWED_FILE_TYPES:jpg,jpeg,png,gif,pdf,doc,docx,xls,xlsx,txt,csv,zip}

  # SES Configuration
  ses:
    from-email: ${AWS_SES_FROM_EMAIL:no-reply@example.com}
    reply-to-email: ${AWS_SES_REPLY_TO_EMAIL:}
    endpoint: ${AWS_SES_ENDPOINT:}
    # Additional SES Configuration
    region: ${AWS_SES_REGION:${AWS_REGION:us-east-1}}
    sandbox-mode: ${AWS_SES_SANDBOX_MODE:true}
    templates:
      welcome: ${AWS_SES_TEMPLATE_WELCOME:welcome-template}
      password-reset: ${AWS_SES_TEMPLATE_PASSWORD_RESET:password-reset-template}
      ticket-created: ${AWS_SES_TEMPLATE_TICKET_CREATED:ticket-created-template}
      ticket-updated: ${AWS_SES_TEMPLATE_TICKET_UPDATED:ticket-updated-template}
      ticket-resolved: ${AWS_SES_TEMPLATE_TICKET_RESOLVED:ticket-resolved-template}

  # Parameter Store Configuration
  ssm:
    parameter-path: ${AWS_SSM_PARAMETER_PATH:/support-ticket-system/}
    endpoint: ${AWS_SSM_ENDPOINT:}
    cache-ttl-seconds: ${AWS_SSM_CACHE_TTL_SECONDS:300}
    preload-parameters: ${AWS_SSM_PRELOAD_PARAMETERS:false}
    # Additional Parameter Store Configuration
    region: ${AWS_SSM_REGION:${AWS_REGION:us-east-1}}
    paths:
      secrets: ${AWS_SSM_PATH_SECRETS:/support-ticket-system/secrets/}
      config: ${AWS_SSM_PATH_CONFIG:/support-ticket-system/config/}
      api-keys: ${AWS_SSM_PATH_API_KEYS:/support-ticket-system/api-keys/}
      feature-flags: ${AWS_SSM_PATH_FEATURE_FLAGS:/support-ticket-system/feature-flags/}

# WebSocket Configuration
websocket:
  # Basic Configuration
  allowed-origins: ${WEBSOCKET_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:5173,https://support.example.com}
  endpoint: ${WEBSOCKET_ENDPOINT:/ws}
  topic-prefix: ${WEBSOCKET_TOPIC_PREFIX:/topic}
  queue-prefix: ${WEBSOCKET_QUEUE_PREFIX:/queue}
  app-prefix: ${WEBSOCKET_APP_PREFIX:/app}

  # Message Configuration
  message:
    max-size: ${WEBSOCKET_MESSAGE_MAX_SIZE:65536}
    trace-enabled: ${WEBSOCKET_MESSAGE_TRACE_ENABLED:false}
    buffer-size-per-session: ${WEBSOCKET_MESSAGE_BUFFER_SIZE_PER_SESSION:1024}
  send-buffer-size: ${WEBSOCKET_SEND_BUFFER_SIZE:524288}
  send-time-limit: ${WEBSOCKET_SEND_TIME_LIMIT:15000}

  # STOMP Broker Relay Configuration (for production with external message broker)
  broker-relay:
    enabled: ${WEBSOCKET_BROKER_RELAY_ENABLED:false}
    host: ${WEBSOCKET_BROKER_RELAY_HOST:localhost}
    port: ${WEBSOCKET_BROKER_RELAY_PORT:61613}
    username: ${WEBSOCKET_BROKER_RELAY_USERNAME:guest}
    password: ${WEBSOCKET_BROKER_RELAY_PASSWORD:guest}
    virtual-host: ${WEBSOCKET_BROKER_RELAY_VIRTUAL_HOST:/}
    heartbeat:
      client: ${WEBSOCKET_BROKER_RELAY_HEARTBEAT_CLIENT:10000}
      server: ${WEBSOCKET_BROKER_RELAY_HEARTBEAT_SERVER:10000}

  # Security Configuration
  security:
    require-authentication: ${WEBSOCKET_SECURITY_REQUIRE_AUTH:true}
    admin-topics-role: ${WEBSOCKET_SECURITY_ADMIN_TOPICS_ROLE:ROLE_ADMIN}
    support-topics-role: ${WEBSOCKET_SECURITY_SUPPORT_TOPICS_ROLE:ROLE_SUPPORT}

  # Endpoints Configuration
  endpoints:
    chat: ${WEBSOCKET_ENDPOINTS_CHAT:/chat}
    notifications: ${WEBSOCKET_ENDPOINTS_NOTIFICATIONS:/notifications}
    tickets: ${WEBSOCKET_ENDPOINTS_TICKETS:/tickets}
    admin: ${WEBSOCKET_ENDPOINTS_ADMIN:/admin}

  # AI Chat Configuration
  ai:
    enabled: ${WEBSOCKET_AI_ENABLED:true}
    default-model: ${WEBSOCKET_AI_DEFAULT_MODEL:gpt-3.5-turbo}
    timeout: ${WEBSOCKET_AI_TIMEOUT:30000}
    max-tokens: ${WEBSOCKET_AI_MAX_TOKENS:1000}
    temperature: ${WEBSOCKET_AI_TEMPERATURE:0.7}
    models:
      - id: gpt-3.5-turbo
        name: GPT-3.5 Turbo
        provider: openai
        enabled: ${WEBSOCKET_AI_MODEL_GPT35_ENABLED:true}
      - id: gpt-4
        name: GPT-4
        provider: openai
        enabled: ${WEBSOCKET_AI_MODEL_GPT4_ENABLED:true}
      - id: claude-2
        name: Claude 2
        provider: anthropic
        enabled: ${WEBSOCKET_AI_MODEL_CLAUDE2_ENABLED:false}
      - id: gemini-pro
        name: Gemini Pro
        provider: google
        enabled: ${WEBSOCKET_AI_MODEL_GEMINI_ENABLED:false}
      - id: custom
        name: Deepseek Chat
        provider: deepseek
        enabled: ${WEBSOCKET_AI_MODEL_DEEPSEEK_ENABLED:false}

# AI Provider Configuration
ai:
  openai:
    api-key: ${AI_OPENAI_API_KEY:}
    endpoint: ${AI_OPENAI_ENDPOINT:https://api.openai.com/v1/chat/completions}
  anthropic:
    api-key: ${AI_ANTHROPIC_API_KEY:}
    endpoint: ${AI_ANTHROPIC_ENDPOINT:https://api.anthropic.com/v1/messages}
  google:
    api-key: ${AI_GOOGLE_API_KEY:}
    endpoint: ${AI_GOOGLE_ENDPOINT:https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent}
  deepseek:
    api-key: ${AI_DEEPSEEK_API_KEY:}
    endpoint: ${AI_DEEPSEEK_ENDPOINT:https://api.deepseek.com/v1/chat/completions}

# Firebase Configuration
firebase:
  enabled: ${FIREBASE_ENABLED:false}
  credentials:
    path: ${FIREBASE_CREDENTIALS_PATH:firebase-service-account.json}
  database:
    url: ${FIREBASE_DATABASE_URL:}

# Springdoc OpenAPI Configuration
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
    tryItOutEnabled: true
    filter: true
  server:
    url: ${SPRINGDOC_SERVER_URL:http://localhost:8080}
  show-actuator: true
  packages-to-scan: com.planb.supportticket.controller
  paths-to-match: /api/**

# Logging Configuration
logging:
  level:
    root: INFO
    org.springframework.web: INFO
    org.hibernate: INFO
    com.planb.supportticket: DEBUG
    org.springframework.messaging: INFO
    org.springframework.web.socket: INFO

---
# Development profile
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    url: jdbc:postgresql://localhost:5432/support_ticket_db
    username: postgres
    password: postgres
  jpa:
    show-sql: true

# Development-specific logging
logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    com.planb.supportticket: DEBUG

---
# Production profile
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    show-sql: false
    hibernate:
      ddl-auto: validate # More conservative setting for production

# Production-specific server settings
server:
  port: ${PORT:8080}

# Production-specific logging
logging:
  level:
    root: WARN
    org.springframework.web: WARN
    org.hibernate: ERROR
    com.planb.supportticket: INFO
  file:
    name: /var/log/support-ticket-system.log
  logback:
    rollingpolicy:
      max-file-size: 10MB
      max-history: 7

# Production-specific CORS settings
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS}
